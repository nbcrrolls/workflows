#!/usr/bin/env python

import os
import os.path
import sys
import glob
import shutil

class Description:
	def __init__(self, ldict, lines):

		self.Name     = self.setWord(ldict["Name"], lines)
		self.Version  = self.setWord(ldict["Version"], lines)
		self.Class    = self.setWord(ldict["Class"], lines)
		self.Kar      = self.setWord(ldict["Kar"], lines)
		self.Image    = self.setWord(ldict["Image"], lines)
		self.Type     = self.setWord(ldict["Type"], lines)
		self.Director = self.setWord(ldict["Director"], lines)
		self.Tag      = self.setString(ldict["Tag"], lines)
		self.Actor    = self.setString(ldict["Actor"], lines)
		self.Purpose  = self.setParagraph(ldict["Purpose"], lines)
		self.Sw       = self.setItem(ldict["Required Software"], lines)
		self.Overview = self.setParagraph(ldict["Overview"], lines)
		self.Usage    = self.setParagraph(ldict["Usage"], lines)
		self.Params   = self.setParagraph(ldict["Parameters"], lines)

	def getName(self):
		return self.Name

	def getType(self):
		return self.Type

	def getDirector(self):
		return self.Director

	def getClass(self):
		return self.Class 

	def getTag(self):
		return self.Tag

	def getTagList(self):
		return self.Tag.split()

	def getImage(self):
		return self.Image

	def getActor(self):
		return self.Actor

	def getActorList(self):
		return self.Actor.split()

	def setWord(self, vals, lines):
		str = lines[vals[0]]
		return  str.strip(" \t\n\r")

	def setString(self, vals, lines):
		words = ""
		for i in vals:
			str = lines[i]
			str = str.strip(" \t\n\r")
			if str.lower() == "none": continue
			words = words + " " + str 
		return  words

	def setParagraph(self, vals, lines):
		paras = []
		para = ""
		for i in vals:
			str = lines[i]
			str = str.lstrip(" ")
			if len(str) <=1:
				paras.append(para)
				para = ""
			para += str 

		paras.append(para)
		return paras

	def setItem(self, vals, lines):
		item = []
		for i in vals:
			str = lines[i]
			str = str.strip(" \t\n\r")
			item.append(str) 

		return  item


class TextParser:

	def __init__(self, argv):
		self.usageName = os.path.basename(argv[0])
		self.setDefaults()
		self.checkArgs(argv)

	def help (self):
		""" print usage """
		print 'Usage: %s [DIR]\n\n' % self.usageName,  \
			  'DIR - optional base directory for workflows and actors \n',  \
			  '      If none provided assume current directory.\n', 
		sys.exit(0)

	def checkArgs(self, argv):
		self.basedir = '.'
		nargs = len(argv)
		if nargs > 2:
			self.help()
		if nargs == 2:
			arg = argv[1]
			if arg in ['-h', '--help', 'help']:
				self.help()
			else:
				self.basedir = argv[1]

		if not os.path.isdir(self.basedir):
			sys.exit('ERROR: %s is not a directory' % self.basedir)
		if not  self.basedir.endswith("/") :
			self.basedir = self.basedir + "/"

	def naturalSort(self, l):
		""" From http://blog.codinghorror.com/sorting-for-humans-natural-sort-order/"""
		import re
		""" Sort the given list in the way that humans expect. """
		convert = lambda text: int(text) if text.isdigit() else text
		alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ]
		l.sort( key=alphanum_key )

	def setDefaults(self):
		self.wflist = [] # list of items describing workflows
		self.alist = []  # list of items describing actors
		self.pattern = 'description' # filename for a worfklow or actor definition
		self.template = 'description-template' # template file  with required fields
		self.keys = []   # keywords from descriptions, used for descriptions verification

		# used for writing filters in main html file
		self.actors = []     # workflows actors 
		self.directors = []  # workflows directors
		self.tags = []       # workflows tags
		self.types = []      # workflows types
		self.filterFormat ="\t\t    <a href=\"#\" data-filter-value=\".%s\">%s</a>\n" # formatting string

		# html directory tree layout
		self.htmldir = "workflows"
		self.htmlWfDir = "%s/wf" % self.htmldir
		self.htmlActorDir = "%s/actor" % self.htmldir
		self.indexhtml = "index.html"

	def getFileList(self):
		files = glob.glob('%s/*/%s' % (self.basedir, self.pattern) )
		self.naturalSort(files)
		self.wflist = files

		files = glob.glob('%sactors/*/%s' % (self.basedir, self.pattern) )
		self.naturalSort(files)
		self.alist = files

	def readTemplate(self):
		templ = '%s%s' % (self.basedir, self.template) 
		if not os.path.isfile (templ):
			sys.exit('ERROR: %s file does not exist' % templ)

		f = open(templ)
		lines = f.readlines()
		f.close()

		for line in lines :
			if line[0] == " ": continue
			word = line.strip(" \t\n\r")
			if len(word): 
				self.keys.append(word)

	def getDescriptions(self):
		# collect workflows content
		self.wfContent = []
		for fname in self.wflist:
			ldict = self.readDescriptionFile(fname)
			self.wfContent.append(ldict)
		
		# collect actors content
		self.aContent = []
		for fname in self.alist:
			ldict = self.readDescriptionFile(fname)
			self.aContent.append(ldict)

	def collectFilters(self):
		""" get all needed filters from workflows descriptions"""

		# get filters by type
		for i in self.wfContent:
			self.types.append(i.getType())
			self.directors.append(i.getDirector())
			self.tags += i.getTagList()
			self.actors += i.getActorList()

		# write div for filters
		txt = ""
		self.types = list(set(self.types))
		txt += self.writeFilterDiv("Types", self.types)

		self.directors = list(set(self.directors))
		txt += self.writeFilterDiv("Directors", self.directors)

		self.tags = list(set(self.tags))
		txt += self.writeFilterDiv("Tags", self.tags)

		self.actors = list(set(self.actors))
		if len(self.actors):
			txt += self.writeFilterDiv("Actors", self.actors)

		return txt

	def writeFilterDiv(self, name, items):
		""" write div section for a type identified by name and items list """
		txt = ""	
		txt += "\t\t<h3>%s</h3>\n" % name
		txt += "\t\t  <div id=\"%sFilters\" class=\"filter-set option-set\" data-filter-group=\"%s\">\n" % (name, name)
		for i in items:
			txt += self.filterFormat % (i,i)
		txt += "\t\t  </div>\n\n"
		return txt

	def collectContainers(self):
		""" get """
		txt = ""
		txt += "\t\t<div id=\"container\">\n"
		order = 0
		for item in self.wfContent:
			txt += self.writeContainerDiv(order, item)
			order += 1
		txt += "\t\t</div>\n"
		return txt

	def writeContainerDiv(self, order, desc):
		txt = ""

		Class = desc.getClass()
		Type = desc.getType()
		Name = desc.getName()
		Image = desc.getImage()
		Tags = desc.getTag()
		Director = desc.getDirector()
		path = "wf/%s/%s" % (Type, Name)

		txt += "\t\t  <div id=\"_%d\" class=\"item %s %s %s %s %s\">\n" % (order, Class, Type, Name, Tags, Director)
		txt += "\t\t\t<a href=\"%s/index.html\">\n" % path
		txt += "\t\t\t  <img class=\"%s-thumb\" src=\"%s/%s\"/>\n" % (Class, path, Image)
		txt += "\t\t\t  <span class=\"%s-name\">%s</span>\n" % (Class, Name)
		txt += "\t\t\t</a>\n"
		txt += "\t\t  </div>\n"

		return txt

	def writeTopHtml(self):
		# add header
		txt = "<!DOCTYPE html>\n"
		txt += "<html>\n"
		txt += "<head>\n"
		txt += "\t<link rel=\"stylesheet\" href=\"lib/style.css\" />\n"
		txt += "\t<script src=\"lib/jquery-1.9.0.min.js\"></script>\n"
		txt += "\t<script src=\"lib/jquery.isotope.min.js\"></script>\n"
		txt += "\t<script src=\"lib/selector.js\"></script>\n"
		txt += "</head>\n\n"
		txt += "<body>\n"
		txt += "\t<table>\n"
		txt += "\t  <tr>\n"

		# add filters 
		txt += "\t  <td id=\"options\" style=\"width:20%; height:100%; vertical-align:top;\">\n"
		txt += self.collectFilters()
		txt += "\t  </td>\n\n"

		# add containers
		txt += "\t  <td style=\"width:80%; vertical-align:top;\">\n"
		txt += self.collectContainers()
		txt += "\t  </td>\n\n"

		# add footer
		txt += "\t</tr></table>\n"
		txt += "</body>\n"
		txt += "</html>\n"

		self.createDir(self.htmldir)
		fname = "%s/%s" % (self.htmldir, self.indexhtml)
		self.writeFile(fname, txt)

	def readDescriptionFile(self, fname):
		f = open(fname)
		lines = f.readlines()
		f.close()

		ldict = {}
		lnum = 0
		for line in lines :
			str = line[:-1]
			str = line.strip(" \t\n\r")
			if str in self.keys:
				key = str
				ldict[str] = []
			else:
				ldict[key].append(lnum)
			lnum += 1

		if self.verifyDescriptionKeys(ldict, fname):
			ldict = {}

		desc = Description(ldict, lines)
		return desc

	def verifyDescriptionKeys(self, ldict, fname):
		desc_keys = ldict.keys()
		templ_keys = self.keys
		ListDiff = lambda l1,l2: [x for x in l1 if x not in l2]
		missKeys = ListDiff(templ_keys, desc_keys)

		if len(missKeys):
			print "ERROR in %s file keys: missing %s " % (fname, missKeys)
			return 1 # error in description file
		return 0

	def writeFile(self, fname, content):
		f = open(fname, "w")
		f.write(content)
		f.close()

	def createDir(self, path):
		if not os.path.exists(path):
			try:
				os.makedirs(path, 0755)
			except OSError as exception:
				if exception.errno != errno.EEXIST:
					raise

	def createHtmlContent(self, item):
		# get workflow info
		Name = item.getName()
		Type = item.getType()
		Image = item.getImage()

		# header 
		txt = "<html>\n"
		txt += "<head>\n"
		txt += "  <title>%s</title>\n" % Name
		txt += "  <link rel=\"stylesheet\" href=\"../../../lib/style.css\" />\n"
		txt += "</head>\n"
		txt += "<body>\n"
		txt += "  <h1 style=\"text-align:center;\">%s workflow</h1>\n" % Name
		txt += "  <table>\n"
		txt += "    <tr>\n"

		# write actors
		txt += "      <td id=\"actors\" style=\"width:10%; height:100%; vertical-align:top;\">\n"
		actors = item.getActorList()
		if len(actors):
			txt += "        <h3>Actors</h3>\n"
			txt += "        <ul>\n"
			for a in actors:
				txt += "          <li><a href=\"../../../actors/%s/%s\">%s</a></li>\n" % (a, self.indexhtml, a)
			txt += "        </ul>\n"
		txt += "      </td>\n"
	
		txt += "      <td style=\"width:90%; vertical-align:top;\">"
		txt +="<img src=\"%s\"></td>\n" % Image
		txt += "    </tr>\n"

		# other parts of description
		# FIXME

		# html footer 
		txt += "  </table>\n"
		txt += "</body>\n"
		txt += "</html>\n"

		return txt

	def writeWorkflowFiles(self):
		for item in self.wfContent:
			Name = item.getName()
			Type = item.getType()
			Image = item.getImage()

			# create directory tree
			wfdir = "%s/%s/%s" % (self.htmlWfDir, Type, Name)
			self.createDir(wfdir)

			# write index.html 
			fname = "%s/%s" % (wfdir, self.indexhtml)
			content = self.createHtmlContent(item)
			self.writeFile(fname, content)
			imgsrc = "%s/%s" % (Name, Image)
			imgdest = "%s/%s" % (wfdir, Image)
			if not os.path.isfile (imgsrc):
				sys.exit('ERROR: %s image file does not exist' % imgsrc)
			shutil.copy(imgsrc, imgdest)


	def run(self):
		self.getFileList()
		self.readTemplate()
		self.getDescriptions()
		self.writeTopHtml()
		self.writeWorkflowFiles()

		print "DEBUG", self.wflist

if __name__ == "__main__":
		app = TextParser(sys.argv)
		app.run()

